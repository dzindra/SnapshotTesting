//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `impact.ttf`.
    static let impactTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "impact", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "impact", withExtension: "ttf")`
    static func impactTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.impactTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `Impact`.
    static let impact = Rswift.FontResource(fontName: "Impact")
    
    /// `UIFont(name: "Impact", size: ...)`
    static func impact(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: impact, size: size)
    }
    
    static func validate() throws {
      if R.font.impact(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Impact' could not be loaded, is 'impact.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 14 images.
  struct image {
    /// Image `challenge-accepted`.
    static let challengeAccepted = Rswift.ImageResource(bundle: R.hostingBundle, name: "challenge-accepted")
    /// Image `cuteness-overload`.
    static let cutenessOverload = Rswift.ImageResource(bundle: R.hostingBundle, name: "cuteness-overload")
    /// Image `forever-alone`.
    static let foreverAlone = Rswift.ImageResource(bundle: R.hostingBundle, name: "forever-alone")
    /// Image `lol-face`.
    static let lolFace = Rswift.ImageResource(bundle: R.hostingBundle, name: "lol-face")
    /// Image `me-gusta`.
    static let meGusta = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-gusta")
    /// Image `mother-of-god`.
    static let motherOfGod = Rswift.ImageResource(bundle: R.hostingBundle, name: "mother-of-god")
    /// Image `tabbar-book-sel`.
    static let tabbarBookSel = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-book-sel")
    /// Image `tabbar-book`.
    static let tabbarBook = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-book")
    /// Image `tabbar-generator-sel`.
    static let tabbarGeneratorSel = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-generator-sel")
    /// Image `tabbar-generator`.
    static let tabbarGenerator = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-generator")
    /// Image `thoughtful`.
    static let thoughtful = Rswift.ImageResource(bundle: R.hostingBundle, name: "thoughtful")
    /// Image `troll-face`.
    static let trollFace = Rswift.ImageResource(bundle: R.hostingBundle, name: "troll-face")
    /// Image `y-u-no`.
    static let yUNo = Rswift.ImageResource(bundle: R.hostingBundle, name: "y-u-no")
    /// Image `yaoming`.
    static let yaoming = Rswift.ImageResource(bundle: R.hostingBundle, name: "yaoming")
    
    /// `UIImage(named: "challenge-accepted", bundle: ..., traitCollection: ...)`
    static func challengeAccepted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.challengeAccepted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cuteness-overload", bundle: ..., traitCollection: ...)`
    static func cutenessOverload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cutenessOverload, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "forever-alone", bundle: ..., traitCollection: ...)`
    static func foreverAlone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.foreverAlone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lol-face", bundle: ..., traitCollection: ...)`
    static func lolFace(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lolFace, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "me-gusta", bundle: ..., traitCollection: ...)`
    static func meGusta(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meGusta, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mother-of-god", bundle: ..., traitCollection: ...)`
    static func motherOfGod(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.motherOfGod, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar-book", bundle: ..., traitCollection: ...)`
    static func tabbarBook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarBook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar-book-sel", bundle: ..., traitCollection: ...)`
    static func tabbarBookSel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarBookSel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar-generator", bundle: ..., traitCollection: ...)`
    static func tabbarGenerator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarGenerator, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar-generator-sel", bundle: ..., traitCollection: ...)`
    static func tabbarGeneratorSel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarGeneratorSel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "thoughtful", bundle: ..., traitCollection: ...)`
    static func thoughtful(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thoughtful, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "troll-face", bundle: ..., traitCollection: ...)`
    static func trollFace(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trollFace, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "y-u-no", bundle: ..., traitCollection: ...)`
    static func yUNo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yUNo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "yaoming", bundle: ..., traitCollection: ...)`
    static func yaoming(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yaoming, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `MemeGeneratorInputCell`.
    static let memeGeneratorInputCell = _R.nib._MemeGeneratorInputCell()
    
    /// `UINib(name: "MemeGeneratorInputCell", in: bundle)`
    static func memeGeneratorInputCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.memeGeneratorInputCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 6 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `detailImageCell`.
    static let detailImageCell: Rswift.ReuseIdentifier<MemeDetailImageCell> = Rswift.ReuseIdentifier(identifier: "detailImageCell")
    /// Reuse identifier `detailTextCell`.
    static let detailTextCell: Rswift.ReuseIdentifier<MemeDetailTextCell> = Rswift.ReuseIdentifier(identifier: "detailTextCell")
    /// Reuse identifier `generatorCell`.
    static let generatorCell: Rswift.ReuseIdentifier<MemeGeneratorCell> = Rswift.ReuseIdentifier(identifier: "generatorCell")
    /// Reuse identifier `generatorImageCell`.
    static let generatorImageCell: Rswift.ReuseIdentifier<MemeGeneratorImageCell> = Rswift.ReuseIdentifier(identifier: "generatorImageCell")
    /// Reuse identifier `generatorInputCell`.
    static let generatorInputCell: Rswift.ReuseIdentifier<MemeGeneratorInputCell> = Rswift.ReuseIdentifier(identifier: "generatorInputCell")
    /// Reuse identifier `memeListCell`.
    static let memeListCell: Rswift.ReuseIdentifier<MemeListCell> = Rswift.ReuseIdentifier(identifier: "memeListCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `MemeListViewController`, and contains static references to 1 segues.
    struct memeListViewController {
      /// Segue identifier `memeListDetailSegue`.
      static let memeListDetailSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MemeListViewController, MemeDetailController> = Rswift.StoryboardSegueIdentifier(identifier: "memeListDetailSegue")
      
      /// Optionally returns a typed version of segue `memeListDetailSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func memeListDetailSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MemeListViewController, MemeDetailController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.memeListViewController.memeListDetailSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 21 localization keys.
    struct localizable {
      /// Base translation: Bottom line
      /// 
      /// Locales: Base
      static let hintBottomLine = Rswift.StringResource(key: "hint.bottomLine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Challenge Accepted
      /// 
      /// Locales: Base
      static let challengeTitle = Rswift.StringResource(key: "challenge.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Cuteness Overload
      /// 
      /// Locales: Base
      static let cutenessTitle = Rswift.StringResource(key: "cuteness.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Cuteness Overload is a reaction face drawn in the style of a rage comic character often used to depict the emotional responses after seeing babies or animals that are deemed adorable, a sad story or a heartwarming moment.
      /// 
      /// Locales: Base
      static let cutenessDescription = Rswift.StringResource(key: "cuteness.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Forever Alone
      /// 
      /// Locales: Base
      static let aloneTitle = Rswift.StringResource(key: "alone.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Forever Alone is an exploitable rage comic character that is used to express loneliness and disappointment with life. The face has also been used as an advice animal and inspired the creation of the snowclone template “Forever an X.”
      /// 
      /// Locales: Base
      static let aloneDescription = Rswift.StringResource(key: "alone.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: LOL Guy
      /// 
      /// Locales: Base
      static let lolTitle = Rswift.StringResource(key: "lol.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: LOL Guy is a rage comic character that is often used to indicate laughter and general amusement.
      /// 
      /// Locales: Base
      static let lolDescription = Rswift.StringResource(key: "lol.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Me Gusta
      /// 
      /// Locales: Base
      static let megustaTitle = Rswift.StringResource(key: "megusta.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Me Gusta is a rage comic face that is typically used to express one’s approval of an awkward or perverse situation. The caption “Me gusta” translates to “I like it” in Spanish. In its beginning, the phrase conveyed an odd sense of pleasure in sexually perverse contexts, but the meaning has since broadened to describe a more general state of being disturbed and pleased at the same time.
      /// 
      /// Locales: Base
      static let megustaDescription = Rswift.StringResource(key: "megusta.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Mother of God
      /// 
      /// Locales: Base
      static let motherofgodTitle = Rswift.StringResource(key: "motherofgod.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Mother of God… is a rage comic character of a man staring intently at something as he takes his sunglasses off. It can be also used outside of rage comics to express astonishment or disbelief in response to a shocking image or a video. Similar to the colloquial usage of the phrase, the reaction face can be used to either indicate approval or disapproval, depending on the context. When used in the context of rage comics, it is usually preceded by a stick-figure drawing of the same man humming and walking with sunglasses still on.
      /// 
      /// Locales: Base
      static let motherofgodDescription = Rswift.StringResource(key: "motherofgod.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Some funny text
      /// 
      /// Locales: Base
      static let hintPlaceholder = Rswift.StringResource(key: "hint.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Top line
      /// 
      /// Locales: Base
      static let hintTopLine = Rswift.StringResource(key: "hint.topLine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Trollface
      /// 
      /// Locales: Base
      static let trollTitle = Rswift.StringResource(key: "troll.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Trollface is a rage comic character wearing a mischievous smile that is meant to represent the facial expression of an Internet troll. The image is most commonly used to portray a character as a troll in rage comics, or alternatively, to identify oneself or another participant as such in online discussions.
      /// 
      /// Locales: Base
      static let trollDescription = Rswift.StringResource(key: "troll.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Y U NO Guy
      /// 
      /// Locales: Base
      static let yunoTitle = Rswift.StringResource(key: "yuno.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Yao Ming Face
      /// 
      /// Locales: Base
      static let yaoTitle = Rswift.StringResource(key: "yao.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Yao Ming Face is a rage comic-style contour drawing of the professional basketball player Yao Ming wearing a hearty smile. The image is typically used as a reaction face to convey a dismissive attitude towards someone else’s input in online discussions, then usually following something that one ups their input.
      /// 
      /// Locales: Base
      static let yaoDescription = Rswift.StringResource(key: "yao.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: “Challenge Accepted” is an expression used to indicate that the speaker is willing to attempt completing a difficult task. The phrase is often associated with a rage comic character illustrated as a stick figure with crossed arms and a smug facial expression.
      /// 
      /// Locales: Base
      static let challengeDescription = Rswift.StringResource(key: "challenge.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: “Y U NO” Guy (also known as “Y U No [X]?”) is an image macro series using SMS shorthands and carefree grammar as a way to bring someone’s attention on a particular subject or issue. The unique facial expression worn by stick-figure character is believed to have been traced from the Japanese sci-fi manga / anime series Gantz.
      /// 
      /// Locales: Base
      static let yunoDescription = Rswift.StringResource(key: "yuno.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      
      /// Base translation: Bottom line
      /// 
      /// Locales: Base
      static func hintBottomLine(_: Void = ()) -> String {
        return NSLocalizedString("hint.bottomLine", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Challenge Accepted
      /// 
      /// Locales: Base
      static func challengeTitle(_: Void = ()) -> String {
        return NSLocalizedString("challenge.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Cuteness Overload
      /// 
      /// Locales: Base
      static func cutenessTitle(_: Void = ()) -> String {
        return NSLocalizedString("cuteness.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Cuteness Overload is a reaction face drawn in the style of a rage comic character often used to depict the emotional responses after seeing babies or animals that are deemed adorable, a sad story or a heartwarming moment.
      /// 
      /// Locales: Base
      static func cutenessDescription(_: Void = ()) -> String {
        return NSLocalizedString("cuteness.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Forever Alone
      /// 
      /// Locales: Base
      static func aloneTitle(_: Void = ()) -> String {
        return NSLocalizedString("alone.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Forever Alone is an exploitable rage comic character that is used to express loneliness and disappointment with life. The face has also been used as an advice animal and inspired the creation of the snowclone template “Forever an X.”
      /// 
      /// Locales: Base
      static func aloneDescription(_: Void = ()) -> String {
        return NSLocalizedString("alone.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: LOL Guy
      /// 
      /// Locales: Base
      static func lolTitle(_: Void = ()) -> String {
        return NSLocalizedString("lol.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: LOL Guy is a rage comic character that is often used to indicate laughter and general amusement.
      /// 
      /// Locales: Base
      static func lolDescription(_: Void = ()) -> String {
        return NSLocalizedString("lol.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Me Gusta
      /// 
      /// Locales: Base
      static func megustaTitle(_: Void = ()) -> String {
        return NSLocalizedString("megusta.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Me Gusta is a rage comic face that is typically used to express one’s approval of an awkward or perverse situation. The caption “Me gusta” translates to “I like it” in Spanish. In its beginning, the phrase conveyed an odd sense of pleasure in sexually perverse contexts, but the meaning has since broadened to describe a more general state of being disturbed and pleased at the same time.
      /// 
      /// Locales: Base
      static func megustaDescription(_: Void = ()) -> String {
        return NSLocalizedString("megusta.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Mother of God
      /// 
      /// Locales: Base
      static func motherofgodTitle(_: Void = ()) -> String {
        return NSLocalizedString("motherofgod.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Mother of God… is a rage comic character of a man staring intently at something as he takes his sunglasses off. It can be also used outside of rage comics to express astonishment or disbelief in response to a shocking image or a video. Similar to the colloquial usage of the phrase, the reaction face can be used to either indicate approval or disapproval, depending on the context. When used in the context of rage comics, it is usually preceded by a stick-figure drawing of the same man humming and walking with sunglasses still on.
      /// 
      /// Locales: Base
      static func motherofgodDescription(_: Void = ()) -> String {
        return NSLocalizedString("motherofgod.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Some funny text
      /// 
      /// Locales: Base
      static func hintPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("hint.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Top line
      /// 
      /// Locales: Base
      static func hintTopLine(_: Void = ()) -> String {
        return NSLocalizedString("hint.topLine", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Trollface
      /// 
      /// Locales: Base
      static func trollTitle(_: Void = ()) -> String {
        return NSLocalizedString("troll.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Trollface is a rage comic character wearing a mischievous smile that is meant to represent the facial expression of an Internet troll. The image is most commonly used to portray a character as a troll in rage comics, or alternatively, to identify oneself or another participant as such in online discussions.
      /// 
      /// Locales: Base
      static func trollDescription(_: Void = ()) -> String {
        return NSLocalizedString("troll.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Y U NO Guy
      /// 
      /// Locales: Base
      static func yunoTitle(_: Void = ()) -> String {
        return NSLocalizedString("yuno.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Yao Ming Face
      /// 
      /// Locales: Base
      static func yaoTitle(_: Void = ()) -> String {
        return NSLocalizedString("yao.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Yao Ming Face is a rage comic-style contour drawing of the professional basketball player Yao Ming wearing a hearty smile. The image is typically used as a reaction face to convey a dismissive attitude towards someone else’s input in online discussions, then usually following something that one ups their input.
      /// 
      /// Locales: Base
      static func yaoDescription(_: Void = ()) -> String {
        return NSLocalizedString("yao.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: “Challenge Accepted” is an expression used to indicate that the speaker is willing to attempt completing a difficult task. The phrase is often associated with a rage comic character illustrated as a stick figure with crossed arms and a smug facial expression.
      /// 
      /// Locales: Base
      static func challengeDescription(_: Void = ()) -> String {
        return NSLocalizedString("challenge.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: “Y U NO” Guy (also known as “Y U No [X]?”) is an image macro series using SMS shorthands and carefree grammar as a way to bring someone’s attention on a particular subject or issue. The unique facial expression worn by stick-figure character is believed to have been traced from the Japanese sci-fi manga / anime series Gantz.
      /// 
      /// Locales: Base
      static func yunoDescription(_: Void = ()) -> String {
        return NSLocalizedString("yuno.description", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 4 localization keys.
    struct main {
      /// en translation: LIST OF MEMES
      /// 
      /// Locales: en
      static let n4VGSI2STitle = Rswift.StringResource(key: "N4V-gS-I2S.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: List of memes
      /// 
      /// Locales: en
      static let qQVRqL4JTitle = Rswift.StringResource(key: "QQV-Rq-L4J.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: MEME GENERATOR
      /// 
      /// Locales: en
      static let ab1HWKbATitle = Rswift.StringResource(key: "Ab1-hW-kbA.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Meme generator
      /// 
      /// Locales: en
      static let eonVYWVpTitle = Rswift.StringResource(key: "eon-VY-wVp.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: LIST OF MEMES
      /// 
      /// Locales: en
      static func n4VGSI2STitle(_: Void = ()) -> String {
        return NSLocalizedString("N4V-gS-I2S.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: List of memes
      /// 
      /// Locales: en
      static func qQVRqL4JTitle(_: Void = ()) -> String {
        return NSLocalizedString("QQV-Rq-L4J.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MEME GENERATOR
      /// 
      /// Locales: en
      static func ab1HWKbATitle(_: Void = ()) -> String {
        return NSLocalizedString("Ab1-hW-kbA.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Meme generator
      /// 
      /// Locales: en
      static func eonVYWVpTitle(_: Void = ()) -> String {
        return NSLocalizedString("eon-VY-wVp.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _MemeGeneratorInputCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MemeGeneratorInputCell
      
      let bundle = R.hostingBundle
      let identifier = "generatorInputCell"
      let name = "MemeGeneratorInputCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MemeGeneratorInputCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MemeGeneratorInputCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "troll-face") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'troll-face' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let memeDetail = StoryboardViewControllerResource<MemeDetailController>(identifier: "memeDetail")
      let memeGenerator = StoryboardViewControllerResource<MemeGeneratorViewController>(identifier: "memeGenerator")
      let memeGeneratorDetail = StoryboardViewControllerResource<MemeGeneratorDetailController>(identifier: "memeGeneratorDetail")
      let memeList = StoryboardViewControllerResource<MemeListViewController>(identifier: "memeList")
      let name = "Main"
      
      func memeDetail(_: Void = ()) -> MemeDetailController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: memeDetail)
      }
      
      func memeGenerator(_: Void = ()) -> MemeGeneratorViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: memeGenerator)
      }
      
      func memeGeneratorDetail(_: Void = ()) -> MemeGeneratorDetailController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: memeGeneratorDetail)
      }
      
      func memeList(_: Void = ()) -> MemeListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: memeList)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "forever-alone") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'forever-alone' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-book") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-book' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "y-u-no") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'y-u-no' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-generator") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-generator' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-generator-sel") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-generator-sel' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-book-sel") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-book-sel' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().memeGeneratorDetail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'memeGeneratorDetail' could not be loaded from storyboard 'Main' as 'MemeGeneratorDetailController'.") }
        if _R.storyboard.main().memeList() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'memeList' could not be loaded from storyboard 'Main' as 'MemeListViewController'.") }
        if _R.storyboard.main().memeDetail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'memeDetail' could not be loaded from storyboard 'Main' as 'MemeDetailController'.") }
        if _R.storyboard.main().memeGenerator() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'memeGenerator' could not be loaded from storyboard 'Main' as 'MemeGeneratorViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}